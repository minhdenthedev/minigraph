package com.minhden.minigraph.kernel.storage;

/**
 * This interface used to represent pages in BufferPool.
 * Storage will read and write pages from disk.
 * "dirty" page means that they have been modified since they were last written out to disk.
 */
public interface Page {
    PageId getId();

    /**
     * Generates a byte array representing the contents of this page.
     * Used to serialize this page to disk.
     * <p>
     * The invariant here is that it should be possible to pass the byte array
     * generated by getPageData to the Page constructor and have it produce
     * an identical Page object.
     *
     * @return A byte array correspond to the bytes of this page.
     */
    byte[] getPageData();

    /**
     * Method to set the page data.
     */
    void setPageData(byte[] data);

    // TODO: add transactions method
}
